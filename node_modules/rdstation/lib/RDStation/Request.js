'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _Exception = require('./Exception/Exception');

var _Exception2 = _interopRequireDefault(_Exception);

var _MalformedBodyRequest = require('./Exception/MalformedBodyRequest');

var _MalformedBodyRequest2 = _interopRequireDefault(_MalformedBodyRequest);

var _ResourceNotFound = require('./Exception/ResourceNotFound');

var _ResourceNotFound2 = _interopRequireDefault(_ResourceNotFound);

var _UnauthorizedRequest = require('./Exception/UnauthorizedRequest');

var _UnauthorizedRequest2 = _interopRequireDefault(_UnauthorizedRequest);

var _InvalidDataType = require('./Exception/InvalidDataType');

var _InvalidDataType2 = _interopRequireDefault(_InvalidDataType);

var _InvalidContentTypeHeader = require('./Exception/InvalidContentTypeHeader');

var _InvalidContentTypeHeader2 = _interopRequireDefault(_InvalidContentTypeHeader);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _asyncToGenerator(fn) { return function () { var gen = fn.apply(this, arguments); return new Promise(function (resolve, reject) { function step(key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { return Promise.resolve(value).then(function (value) { step("next", value); }, function (err) { step("throw", err); }); } } return step("next"); }); }; }

class Request {

    static send(method, endpoint, data = {}, headers = {}, fetchInitOpts = {}) {
        return _asyncToGenerator(function* () {
            let url = `${Request.API_ENDPOINT}${endpoint}`;

            let body = null;
            if (method.toString().toUpperCase() == 'GET') {
                const qs = data.keys(object).map(function (key) {
                    return `${key}=${object[key].toString()}`;
                }).join('&');
                url = `${url}`;
                body = new URLSearchParams(qs);
            } else if (method.toString().toUpperCase() == 'POST' || method.toString().toUpperCase() == 'PUT' || method.toString().toUpperCase() == 'PATCH') {
                body = JSON.stringify(data);
            }

            const response = yield fetch(url, Object.assign({
                method,
                headers: new Headers(headers),
                body
            }, fetchInitOpts));

            const responseBody = yield response.json();

            if (!response.ok) {
                if (response.status >= 400) {
                    let exception = new _Exception2.default();
                    // exception
                    switch (response.status) {
                        case _Exception2.default.BAD_REQUEST:
                            exception = new _MalformedBodyRequest2.default();
                            break;
                        case _Exception2.default.NOT_FOUND:
                            exception = new _ResourceNotFound2.default();
                            break;
                        case _Exception2.default.UNAUTHORIZED:
                            exception = new _UnauthorizedRequest2.default();
                            break;
                        case _Exception2.default.UNPROCESSABLE_ENTITY:
                            exception = new _InvalidDataType2.default();
                            break;
                        case _Exception2.default.UNSUPPORTED_MEDIA_TYPE:
                            exception = new _InvalidContentTypeHeader2.default();
                            break;
                    }

                    exception.errors = responseBody.errors || {};

                    throw exception;
                }
            }

            return responseBody;
        })();
    }
}
exports.default = Request;
Request.API_ENDPOINT = 'https://api.rd.services';